=begin
#Permit.io API

#Fullstack Authorization as a Service

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class RoleAssignmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign Role
    # assign a role to a user in a given scope (read: tenant). All role assignments are scoped by a tenant id or by a resource id (i.e: resource roles).
    # @param change_role_assignment [ChangeRoleAssignment] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [RoleAssignment]
    def assign_role(change_role_assignment, opts = {})
      data, _status_code, _headers = assign_role_with_http_info(change_role_assignment, opts)
      data
    end

    # Assign Role
    # assign a role to a user in a given scope (read: tenant). All role assignments are scoped by a tenant id or by a resource id (i.e: resource roles).
    # @param change_role_assignment [ChangeRoleAssignment] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(RoleAssignment, Integer, Hash)>] RoleAssignment data, response status code and response headers
    def assign_role_with_http_info(change_role_assignment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleAssignmentsApi.assign_role ...'
      end
      # verify the required parameter 'change_role_assignment' is set
      if @api_client.config.client_side_validation && change_role_assignment.nil?
        fail ArgumentError, "Missing the required parameter 'change_role_assignment' when calling RoleAssignmentsApi.assign_role"
      end
      # resource path
      local_var_path = '/v1/role_assignments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(change_role_assignment)

      # return_type
      return_type = opts[:debug_return_type] || 'RoleAssignment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"RoleAssignmentsApi.assign_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleAssignmentsApi#assign_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Role Assignment
    # Retrieve a single role assignment by its id.
    # @param role_assignment_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [RoleAssignment]
    def get_role_assignment(role_assignment_id, opts = {})
      data, _status_code, _headers = get_role_assignment_with_http_info(role_assignment_id, opts)
      data
    end

    # Get Role Assignment
    # Retrieve a single role assignment by its id.
    # @param role_assignment_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(RoleAssignment, Integer, Hash)>] RoleAssignment data, response status code and response headers
    def get_role_assignment_with_http_info(role_assignment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleAssignmentsApi.get_role_assignment ...'
      end
      # verify the required parameter 'role_assignment_id' is set
      if @api_client.config.client_side_validation && role_assignment_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_assignment_id' when calling RoleAssignmentsApi.get_role_assignment"
      end
      # resource path
      local_var_path = '/v1/role_assignments/{role_assignment_id}'.sub('{' + 'role_assignment_id' + '}', CGI.escape(role_assignment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoleAssignment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"RoleAssignmentsApi.get_role_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleAssignmentsApi#get_role_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Role Assignments
    # Get the list of role assignments, optionally filtered by: - role: the role that was granted. - user: the user (i.e: actor) that was granted the role. - tenant: the tenant in which the role was granted in.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip first n results (default to 0)
    # @option opts [Integer] :limit Limit to n results
    # @option opts [String] :role 
    # @option opts [String] :user 
    # @option opts [String] :tenant the tenant unique id (uuid)
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [RoleAssignmentList]
    def list_role_assignments(opts = {})
      data, _status_code, _headers = list_role_assignments_with_http_info(opts)
      data
    end

    # List Role Assignments
    # Get the list of role assignments, optionally filtered by: - role: the role that was granted. - user: the user (i.e: actor) that was granted the role. - tenant: the tenant in which the role was granted in.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip first n results
    # @option opts [Integer] :limit Limit to n results
    # @option opts [String] :role 
    # @option opts [String] :user 
    # @option opts [String] :tenant the tenant unique id (uuid)
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(RoleAssignmentList, Integer, Hash)>] RoleAssignmentList data, response status code and response headers
    def list_role_assignments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleAssignmentsApi.list_role_assignments ...'
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling RoleAssignmentsApi.list_role_assignments, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling RoleAssignmentsApi.list_role_assignments, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling RoleAssignmentsApi.list_role_assignments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/v1/role_assignments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'tenant'] = opts[:'tenant'] if !opts[:'tenant'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoleAssignmentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"RoleAssignmentsApi.list_role_assignments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleAssignmentsApi#list_role_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Role Assignment
    # Remove a single role assignment by its id.
    # @param role_assignment_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [nil]
    def remove_role_assignment(role_assignment_id, opts = {})
      remove_role_assignment_with_http_info(role_assignment_id, opts)
      nil
    end

    # Remove Role Assignment
    # Remove a single role assignment by its id.
    # @param role_assignment_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_role_assignment_with_http_info(role_assignment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleAssignmentsApi.remove_role_assignment ...'
      end
      # verify the required parameter 'role_assignment_id' is set
      if @api_client.config.client_side_validation && role_assignment_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_assignment_id' when calling RoleAssignmentsApi.remove_role_assignment"
      end
      # resource path
      local_var_path = '/v1/role_assignments/{role_assignment_id}'.sub('{' + 'role_assignment_id' + '}', CGI.escape(role_assignment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"RoleAssignmentsApi.remove_role_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleAssignmentsApi#remove_role_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unassign Role
    # Unassign a role from a user in a given scope (read: tenant).
    # @param role [String] 
    # @param user [String] 
    # @param scope [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :environment filter only objects belonging to this environment
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [nil]
    def unassign_role(role, user, scope, opts = {})
      unassign_role_with_http_info(role, user, scope, opts)
      nil
    end

    # Unassign Role
    # Unassign a role from a user in a given scope (read: tenant).
    # @param role [String] 
    # @param user [String] 
    # @param scope [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :environment filter only objects belonging to this environment
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unassign_role_with_http_info(role, user, scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleAssignmentsApi.unassign_role ...'
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling RoleAssignmentsApi.unassign_role"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling RoleAssignmentsApi.unassign_role"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling RoleAssignmentsApi.unassign_role"
      end
      # resource path
      local_var_path = '/v1/role_assignments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'role'] = role
      query_params[:'user'] = user
      query_params[:'scope'] = scope
      query_params[:'environment'] = opts[:'environment'] if !opts[:'environment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"RoleAssignmentsApi.unassign_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleAssignmentsApi#unassign_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
