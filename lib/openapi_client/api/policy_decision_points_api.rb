=begin
#Permit.io API

#Fullstack Authorization as a Service

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class PolicyDecisionPointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Policy Decision Point
    # Create a new Policy Decision Point.
    # @param new_pdp [NewPDP] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [PDP]
    def create_pdp(new_pdp, opts = {})
      data, _status_code, _headers = create_pdp_with_http_info(new_pdp, opts)
      data
    end

    # Create Policy Decision Point
    # Create a new Policy Decision Point.
    # @param new_pdp [NewPDP] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(PDP, Integer, Hash)>] PDP data, response status code and response headers
    def create_pdp_with_http_info(new_pdp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.create_pdp ...'
      end
      # verify the required parameter 'new_pdp' is set
      if @api_client.config.client_side_validation && new_pdp.nil?
        fail ArgumentError, "Missing the required parameter 'new_pdp' when calling PolicyDecisionPointsApi.create_pdp"
      end
      # resource path
      local_var_path = '/v1/pdps'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_pdp)

      # return_type
      return_type = opts[:debug_return_type] || 'PDP'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.create_pdp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#create_pdp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Policy Decision Point
    # Delete an existing PDP.
    # @param pdp_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [nil]
    def delete_pdp(pdp_id, opts = {})
      delete_pdp_with_http_info(pdp_id, opts)
      nil
    end

    # Delete Policy Decision Point
    # Delete an existing PDP.
    # @param pdp_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pdp_with_http_info(pdp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.delete_pdp ...'
      end
      # verify the required parameter 'pdp_id' is set
      if @api_client.config.client_side_validation && pdp_id.nil?
        fail ArgumentError, "Missing the required parameter 'pdp_id' when calling PolicyDecisionPointsApi.delete_pdp"
      end
      # resource path
      local_var_path = '/v1/pdps/{pdp_id}'.sub('{' + 'pdp_id' + '}', CGI.escape(pdp_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.delete_pdp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#delete_pdp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Connected PDP Config
    # @param [Hash] opts the optional parameters
    # @return [RemoteConfig]
    def get_current_pdp_config(opts = {})
      data, _status_code, _headers = get_current_pdp_config_with_http_info(opts)
      data
    end

    # Get Connected PDP Config
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoteConfig, Integer, Hash)>] RemoteConfig data, response status code and response headers
    def get_current_pdp_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.get_current_pdp_config ...'
      end
      # resource path
      local_var_path = '/v1/pdps/me/config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.get_current_pdp_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#get_current_pdp_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Policy Decision Point
    # Retrieve PDP details.
    # @param pdp_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [PDP]
    def get_pdp(pdp_id, opts = {})
      data, _status_code, _headers = get_pdp_with_http_info(pdp_id, opts)
      data
    end

    # Get Policy Decision Point
    # Retrieve PDP details.
    # @param pdp_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(PDP, Integer, Hash)>] PDP data, response status code and response headers
    def get_pdp_with_http_info(pdp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.get_pdp ...'
      end
      # verify the required parameter 'pdp_id' is set
      if @api_client.config.client_side_validation && pdp_id.nil?
        fail ArgumentError, "Missing the required parameter 'pdp_id' when calling PolicyDecisionPointsApi.get_pdp"
      end
      # resource path
      local_var_path = '/v1/pdps/{pdp_id}'.sub('{' + 'pdp_id' + '}', CGI.escape(pdp_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PDP'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.get_pdp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#get_pdp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PDP Config
    # @param pdp_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [RemoteConfig]
    def get_pdp_config(pdp_id, opts = {})
      data, _status_code, _headers = get_pdp_config_with_http_info(pdp_id, opts)
      data
    end

    # Get PDP Config
    # @param pdp_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(RemoteConfig, Integer, Hash)>] RemoteConfig data, response status code and response headers
    def get_pdp_config_with_http_info(pdp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.get_pdp_config ...'
      end
      # verify the required parameter 'pdp_id' is set
      if @api_client.config.client_side_validation && pdp_id.nil?
        fail ArgumentError, "Missing the required parameter 'pdp_id' when calling PolicyDecisionPointsApi.get_pdp_config"
      end
      # resource path
      local_var_path = '/v1/pdps/{pdp_id}/config'.sub('{' + 'pdp_id' + '}', CGI.escape(pdp_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.get_pdp_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#get_pdp_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Policy Decision Points
    # Get a list of PDPs configured under this organization/environment.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip first n results (default to 0)
    # @option opts [Integer] :limit Limit to n results
    # @option opts [String] :environment filter only objects belonging to this environment
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [PDPList]
    def list_pdps(opts = {})
      data, _status_code, _headers = list_pdps_with_http_info(opts)
      data
    end

    # List Policy Decision Points
    # Get a list of PDPs configured under this organization/environment.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip first n results
    # @option opts [Integer] :limit Limit to n results
    # @option opts [String] :environment filter only objects belonging to this environment
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(PDPList, Integer, Hash)>] PDPList data, response status code and response headers
    def list_pdps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.list_pdps ...'
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling PolicyDecisionPointsApi.list_pdps, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PolicyDecisionPointsApi.list_pdps, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PolicyDecisionPointsApi.list_pdps, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/v1/pdps'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'environment'] = opts[:'environment'] if !opts[:'environment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PDPList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.list_pdps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#list_pdps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rotate PDP Secret
    # Rotate the client secret for this project.
    # @param pdp_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [PDP]
    def rotate_pdp_secret(pdp_id, opts = {})
      data, _status_code, _headers = rotate_pdp_secret_with_http_info(pdp_id, opts)
      data
    end

    # Rotate PDP Secret
    # Rotate the client secret for this project.
    # @param pdp_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(PDP, Integer, Hash)>] PDP data, response status code and response headers
    def rotate_pdp_secret_with_http_info(pdp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.rotate_pdp_secret ...'
      end
      # verify the required parameter 'pdp_id' is set
      if @api_client.config.client_side_validation && pdp_id.nil?
        fail ArgumentError, "Missing the required parameter 'pdp_id' when calling PolicyDecisionPointsApi.rotate_pdp_secret"
      end
      # resource path
      local_var_path = '/v1/pdps/{pdp_id}/rotate-secret'.sub('{' + 'pdp_id' + '}', CGI.escape(pdp_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PDP'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.rotate_pdp_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#rotate_pdp_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Policy Decision Point
    # Update the PDP settings.
    # @param pdp_id [String] 
    # @param update_pdp [UpdatePDP] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [PDP]
    def update_pdp(pdp_id, update_pdp, opts = {})
      data, _status_code, _headers = update_pdp_with_http_info(pdp_id, update_pdp, opts)
      data
    end

    # Update Policy Decision Point
    # Update the PDP settings.
    # @param pdp_id [String] 
    # @param update_pdp [UpdatePDP] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(PDP, Integer, Hash)>] PDP data, response status code and response headers
    def update_pdp_with_http_info(pdp_id, update_pdp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.update_pdp ...'
      end
      # verify the required parameter 'pdp_id' is set
      if @api_client.config.client_side_validation && pdp_id.nil?
        fail ArgumentError, "Missing the required parameter 'pdp_id' when calling PolicyDecisionPointsApi.update_pdp"
      end
      # verify the required parameter 'update_pdp' is set
      if @api_client.config.client_side_validation && update_pdp.nil?
        fail ArgumentError, "Missing the required parameter 'update_pdp' when calling PolicyDecisionPointsApi.update_pdp"
      end
      # resource path
      local_var_path = '/v1/pdps/{pdp_id}'.sub('{' + 'pdp_id' + '}', CGI.escape(pdp_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_pdp)

      # return_type
      return_type = opts[:debug_return_type] || 'PDP'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.update_pdp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#update_pdp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
