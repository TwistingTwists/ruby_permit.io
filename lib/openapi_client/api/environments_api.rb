=begin
#Permit.io API

#Fullstack Authorization as a Service

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class EnvironmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Environment
    # Create a new client environment under this organization.
    # @param project_id [String] 
    # @param new_environment [NewEnvironment] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Environment]
    def create_environment(project_id, new_environment, opts = {})
      data, _status_code, _headers = create_environment_with_http_info(project_id, new_environment, opts)
      data
    end

    # Create Environment
    # Create a new client environment under this organization.
    # @param project_id [String] 
    # @param new_environment [NewEnvironment] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(Environment, Integer, Hash)>] Environment data, response status code and response headers
    def create_environment_with_http_info(project_id, new_environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentsApi.create_environment ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EnvironmentsApi.create_environment"
      end
      # verify the required parameter 'new_environment' is set
      if @api_client.config.client_side_validation && new_environment.nil?
        fail ArgumentError, "Missing the required parameter 'new_environment' when calling EnvironmentsApi.create_environment"
      end
      # resource path
      local_var_path = '/v1/projects/{project_id}/environments'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_environment)

      # return_type
      return_type = opts[:debug_return_type] || 'Environment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"EnvironmentsApi.create_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentsApi#create_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Environment
    # Delete an existing Environment.
    # @param environment_id [String] 
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [nil]
    def delete_environment(environment_id, project_id, opts = {})
      delete_environment_with_http_info(environment_id, project_id, opts)
      nil
    end

    # Delete Environment
    # Delete an existing Environment.
    # @param environment_id [String] 
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_environment_with_http_info(environment_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentsApi.delete_environment ...'
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling EnvironmentsApi.delete_environment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EnvironmentsApi.delete_environment"
      end
      # resource path
      local_var_path = '/v1/projects/{project_id}/environments/{environment_id}'.sub('{' + 'environment_id' + '}', CGI.escape(environment_id.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"EnvironmentsApi.delete_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentsApi#delete_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Environment
    # Retrieve environment details.
    # @param environment_id [String] 
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Environment]
    def get_environment(environment_id, project_id, opts = {})
      data, _status_code, _headers = get_environment_with_http_info(environment_id, project_id, opts)
      data
    end

    # Get Environment
    # Retrieve environment details.
    # @param environment_id [String] 
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(Environment, Integer, Hash)>] Environment data, response status code and response headers
    def get_environment_with_http_info(environment_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentsApi.get_environment ...'
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling EnvironmentsApi.get_environment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EnvironmentsApi.get_environment"
      end
      # resource path
      local_var_path = '/v1/projects/{project_id}/environments/{environment_id}'.sub('{' + 'environment_id' + '}', CGI.escape(environment_id.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Environment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"EnvironmentsApi.get_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentsApi#get_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Environments
    # Get a list of environments that are configured under this organization.
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip first n results (default to 0)
    # @option opts [Integer] :limit Limit to n results
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [EnvironmentList]
    def list_environments(project_id, opts = {})
      data, _status_code, _headers = list_environments_with_http_info(project_id, opts)
      data
    end

    # List Environments
    # Get a list of environments that are configured under this organization.
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip first n results
    # @option opts [Integer] :limit Limit to n results
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(EnvironmentList, Integer, Hash)>] EnvironmentList data, response status code and response headers
    def list_environments_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentsApi.list_environments ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EnvironmentsApi.list_environments"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling EnvironmentsApi.list_environments, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EnvironmentsApi.list_environments, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EnvironmentsApi.list_environments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/v1/projects/{project_id}/environments'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnvironmentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"EnvironmentsApi.list_environments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentsApi#list_environments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Environment
    # Update the environment settings.
    # @param environment_id [String] 
    # @param project_id [String] 
    # @param update_environment [UpdateEnvironment] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Environment]
    def update_environment(environment_id, project_id, update_environment, opts = {})
      data, _status_code, _headers = update_environment_with_http_info(environment_id, project_id, update_environment, opts)
      data
    end

    # Update Environment
    # Update the environment settings.
    # @param environment_id [String] 
    # @param project_id [String] 
    # @param update_environment [UpdateEnvironment] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(Environment, Integer, Hash)>] Environment data, response status code and response headers
    def update_environment_with_http_info(environment_id, project_id, update_environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentsApi.update_environment ...'
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling EnvironmentsApi.update_environment"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling EnvironmentsApi.update_environment"
      end
      # verify the required parameter 'update_environment' is set
      if @api_client.config.client_side_validation && update_environment.nil?
        fail ArgumentError, "Missing the required parameter 'update_environment' when calling EnvironmentsApi.update_environment"
      end
      # resource path
      local_var_path = '/v1/projects/{project_id}/environments/{environment_id}'.sub('{' + 'environment_id' + '}', CGI.escape(environment_id.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_environment)

      # return_type
      return_type = opts[:debug_return_type] || 'Environment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"EnvironmentsApi.update_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentsApi#update_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
