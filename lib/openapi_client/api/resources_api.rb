=begin
#Permit.io API

#Fullstack Authorization as a Service

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class ResourcesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Resource
    # Create a new resource under the active organization/environment.  If resource with the same name already exists, will throw exception. For get-or-create behavior, use sync_resource instead.
    # @param new_resource [NewResource] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Resource]
    def create_resource(new_resource, opts = {})
      data, _status_code, _headers = create_resource_with_http_info(new_resource, opts)
      data
    end

    # Create Resource
    # Create a new resource under the active organization/environment.  If resource with the same name already exists, will throw exception. For get-or-create behavior, use sync_resource instead.
    # @param new_resource [NewResource] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def create_resource_with_http_info(new_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.create_resource ...'
      end
      # verify the required parameter 'new_resource' is set
      if @api_client.config.client_side_validation && new_resource.nil?
        fail ArgumentError, "Missing the required parameter 'new_resource' when calling ResourcesApi.create_resource"
      end
      # resource path
      local_var_path = '/v1/resources'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_resource)

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"ResourcesApi.create_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#create_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Resource
    # Delete an existing resource.
    # @param resource_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [nil]
    def delete_resource(resource_id, opts = {})
      delete_resource_with_http_info(resource_id, opts)
      nil
    end

    # Delete Resource
    # Delete an existing resource.
    # @param resource_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_resource_with_http_info(resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.delete_resource ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ResourcesApi.delete_resource"
      end
      # resource path
      local_var_path = '/v1/resources/{resource_id}'.sub('{' + 'resource_id' + '}', CGI.escape(resource_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"ResourcesApi.delete_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#delete_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Resource
    # Retrieve resource details.
    # @param resource_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Resource]
    def get_resource(resource_id, opts = {})
      data, _status_code, _headers = get_resource_with_http_info(resource_id, opts)
      data
    end

    # Get Resource
    # Retrieve resource details.
    # @param resource_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def get_resource_with_http_info(resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.get_resource ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ResourcesApi.get_resource"
      end
      # resource path
      local_var_path = '/v1/resources/{resource_id}'.sub('{' + 'resource_id' + '}', CGI.escape(resource_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"ResourcesApi.get_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#get_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Resources
    # Get the list of the resources configured for this organization/environment.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_built_ins Whether or not the result should include resources that are automatically created by the system (default to false)
    # @option opts [Integer] :skip Skip first n results (default to 0)
    # @option opts [Integer] :limit Limit to n results
    # @option opts [String] :environment filter only objects belonging to this environment
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [ResourceList]
    def list_resources(opts = {})
      data, _status_code, _headers = list_resources_with_http_info(opts)
      data
    end

    # List Resources
    # Get the list of the resources configured for this organization/environment.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_built_ins Whether or not the result should include resources that are automatically created by the system
    # @option opts [Integer] :skip Skip first n results
    # @option opts [Integer] :limit Limit to n results
    # @option opts [String] :environment filter only objects belonging to this environment
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(ResourceList, Integer, Hash)>] ResourceList data, response status code and response headers
    def list_resources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.list_resources ...'
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling ResourcesApi.list_resources, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ResourcesApi.list_resources, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ResourcesApi.list_resources, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/v1/resources'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_built_ins'] = opts[:'include_built_ins'] if !opts[:'include_built_ins'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'environment'] = opts[:'environment'] if !opts[:'environment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"ResourcesApi.list_resources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#list_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Put Resource
    # Replaces a single resource. If the resource does not already exist, creates the resource.
    # @param resource_name [String] 
    # @param new_resource [NewResource] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Resource]
    def put_resource(resource_name, new_resource, opts = {})
      data, _status_code, _headers = put_resource_with_http_info(resource_name, new_resource, opts)
      data
    end

    # Put Resource
    # Replaces a single resource. If the resource does not already exist, creates the resource.
    # @param resource_name [String] 
    # @param new_resource [NewResource] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def put_resource_with_http_info(resource_name, new_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.put_resource ...'
      end
      # verify the required parameter 'resource_name' is set
      if @api_client.config.client_side_validation && resource_name.nil?
        fail ArgumentError, "Missing the required parameter 'resource_name' when calling ResourcesApi.put_resource"
      end
      # verify the required parameter 'new_resource' is set
      if @api_client.config.client_side_validation && new_resource.nil?
        fail ArgumentError, "Missing the required parameter 'new_resource' when calling ResourcesApi.put_resource"
      end
      # resource path
      local_var_path = '/v1/resources/{resource_name}'.sub('{' + 'resource_name' + '}', CGI.escape(resource_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_resource)

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"ResourcesApi.put_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#put_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync Resources
    # Syncs all the enforcement points in one request (Syncs all resources and actions)
    # @param resource_definitions [ResourceDefinitions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [ResourceList]
    def sync_resources(resource_definitions, opts = {})
      data, _status_code, _headers = sync_resources_with_http_info(resource_definitions, opts)
      data
    end

    # Sync Resources
    # Syncs all the enforcement points in one request (Syncs all resources and actions)
    # @param resource_definitions [ResourceDefinitions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(ResourceList, Integer, Hash)>] ResourceList data, response status code and response headers
    def sync_resources_with_http_info(resource_definitions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.sync_resources ...'
      end
      # verify the required parameter 'resource_definitions' is set
      if @api_client.config.client_side_validation && resource_definitions.nil?
        fail ArgumentError, "Missing the required parameter 'resource_definitions' when calling ResourcesApi.sync_resources"
      end
      # resource path
      local_var_path = '/v1/resources'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(resource_definitions)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"ResourcesApi.sync_resources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#sync_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Resource
    # Update the resource data.
    # @param resource_id [String] 
    # @param update_resource [UpdateResource] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Resource]
    def update_resource(resource_id, update_resource, opts = {})
      data, _status_code, _headers = update_resource_with_http_info(resource_id, update_resource, opts)
      data
    end

    # Update Resource
    # Update the resource data.
    # @param resource_id [String] 
    # @param update_resource [UpdateResource] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(Resource, Integer, Hash)>] Resource data, response status code and response headers
    def update_resource_with_http_info(resource_id, update_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.update_resource ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ResourcesApi.update_resource"
      end
      # verify the required parameter 'update_resource' is set
      if @api_client.config.client_side_validation && update_resource.nil?
        fail ArgumentError, "Missing the required parameter 'update_resource' when calling ResourcesApi.update_resource"
      end
      # resource path
      local_var_path = '/v1/resources/{resource_id}'.sub('{' + 'resource_id' + '}', CGI.escape(resource_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_resource)

      # return_type
      return_type = opts[:debug_return_type] || 'Resource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"ResourcesApi.update_resource",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#update_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
