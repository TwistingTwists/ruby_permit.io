=begin
#Permit.io API

#Fullstack Authorization as a Service

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class PermissionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign Permissions To Role
    # Assign permissions to a given role.
    # @param role_id [String] 
    # @param permission_selection [PermissionSelection] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [nil]
    def assign_permissions_to_role(role_id, permission_selection, opts = {})
      assign_permissions_to_role_with_http_info(role_id, permission_selection, opts)
      nil
    end

    # Assign Permissions To Role
    # Assign permissions to a given role.
    # @param role_id [String] 
    # @param permission_selection [PermissionSelection] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def assign_permissions_to_role_with_http_info(role_id, permission_selection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.assign_permissions_to_role ...'
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling PermissionsApi.assign_permissions_to_role"
      end
      # verify the required parameter 'permission_selection' is set
      if @api_client.config.client_side_validation && permission_selection.nil?
        fail ArgumentError, "Missing the required parameter 'permission_selection' when calling PermissionsApi.assign_permissions_to_role"
      end
      # resource path
      local_var_path = '/v1/roles/{role_id}/permissions'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(permission_selection)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PermissionsApi.assign_permissions_to_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#assign_permissions_to_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Role Permissions
    # Get a list of permissions assigned to a given role.
    # @param role_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip first n results (default to 0)
    # @option opts [Integer] :limit Limit to n results
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [PermissionList]
    def list_role_permissions(role_id, opts = {})
      data, _status_code, _headers = list_role_permissions_with_http_info(role_id, opts)
      data
    end

    # List Role Permissions
    # Get a list of permissions assigned to a given role.
    # @param role_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip first n results
    # @option opts [Integer] :limit Limit to n results
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(PermissionList, Integer, Hash)>] PermissionList data, response status code and response headers
    def list_role_permissions_with_http_info(role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.list_role_permissions ...'
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling PermissionsApi.list_role_permissions"
      end
      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling PermissionsApi.list_role_permissions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PermissionsApi.list_role_permissions, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PermissionsApi.list_role_permissions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/v1/roles/{role_id}/permissions'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PermissionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PermissionsApi.list_role_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#list_role_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Permissions From Role
    # Remove permissions from a given role.
    # @param role_id [String] 
    # @param permission_selection [PermissionSelection] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [nil]
    def remove_permissions_from_role(role_id, permission_selection, opts = {})
      remove_permissions_from_role_with_http_info(role_id, permission_selection, opts)
      nil
    end

    # Remove Permissions From Role
    # Remove permissions from a given role.
    # @param role_id [String] 
    # @param permission_selection [PermissionSelection] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_organization_id The id of the active organization you want to query on
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_permissions_from_role_with_http_info(role_id, permission_selection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PermissionsApi.remove_permissions_from_role ...'
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling PermissionsApi.remove_permissions_from_role"
      end
      # verify the required parameter 'permission_selection' is set
      if @api_client.config.client_side_validation && permission_selection.nil?
        fail ArgumentError, "Missing the required parameter 'permission_selection' when calling PermissionsApi.remove_permissions_from_role"
      end
      # resource path
      local_var_path = '/v1/roles/{role_id}/permissions'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-organization-id'] = opts[:'x_organization_id'] if !opts[:'x_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(permission_selection)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2PasswordBearer']

      new_options = opts.merge(
        :operation => :"PermissionsApi.remove_permissions_from_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PermissionsApi#remove_permissions_from_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
