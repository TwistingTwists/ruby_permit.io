=begin
#Permit.io API

#Fullstack Authorization as a Service

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::UsersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UsersApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::UsersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersApi' do
    it 'should create an instance of UsersApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::UsersApi)
    end
  end

  # unit tests for assign_user_tenants
  # Assign User Tenants
  # Assign a user to one or more tenants in the user&#39;s organization.
  # @param user_id 
  # @param tenant_selection 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [User]
  describe 'assign_user_tenants test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_user
  # Create User
  # Create a new User in the Permit system. This user is associated with permissions data.
  # @param new_user 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [User]
  describe 'create_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_user
  # Delete User
  # Delete an existing User.
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [nil]
  describe 'delete_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user
  # Get User
  # Retrieve user details.
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [User]
  describe 'get_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_roles
  # Get User Roles
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :tenant the tenant unique id (uuid)
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [RoleList]
  describe 'get_user_roles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_tenants
  # Get User Tenants
  # Get a list of tenants the user belongs to (i.e: assigned a role in).
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [TenantList]
  describe 'get_user_tenants test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_users
  # List Users
  # Get a list of the users under the active environment or organization. If tenant is provided, the user must have an active role inside that tenant.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search 
  # @option opts [Integer] :skip Skip first n results
  # @option opts [Integer] :limit Limit to n results
  # @option opts [String] :tenant the tenant unique id (uuid)
  # @option opts [String] :environment filter only objects belonging to this environment
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [UserListWithRoles]
  describe 'list_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_user_tenants
  # Remove User Tenants
  # Remove a user from one or more tenants in the user&#39;s organization.
  # @param user_id 
  # @param tenant_selection 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [User]
  describe 'remove_user_tenants test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sync_user
  # Sync User
  # Create a user if it does not already exist. Otherwise, update the user data.  NOTE: The roles field is used only when the user is created, and is ignored when updating an existing user. Consider it to be \&quot;initial roles\&quot;.
  # @param new_remote_user 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [User]
  describe 'sync_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user
  # Update User
  # Update the user data.
  # @param user_id 
  # @param update_user 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [User]
  describe 'update_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
