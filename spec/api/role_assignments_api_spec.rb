=begin
#Permit.io API

#Fullstack Authorization as a Service

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::RoleAssignmentsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RoleAssignmentsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::RoleAssignmentsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RoleAssignmentsApi' do
    it 'should create an instance of RoleAssignmentsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::RoleAssignmentsApi)
    end
  end

  # unit tests for assign_role
  # Assign Role
  # assign a role to a user in a given scope (read: tenant). All role assignments are scoped by a tenant id or by a resource id (i.e: resource roles).
  # @param change_role_assignment 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [RoleAssignment]
  describe 'assign_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_role_assignment
  # Get Role Assignment
  # Retrieve a single role assignment by its id.
  # @param role_assignment_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [RoleAssignment]
  describe 'get_role_assignment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_role_assignments
  # List Role Assignments
  # Get the list of role assignments, optionally filtered by: - role: the role that was granted. - user: the user (i.e: actor) that was granted the role. - tenant: the tenant in which the role was granted in.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :skip Skip first n results
  # @option opts [Integer] :limit Limit to n results
  # @option opts [String] :role 
  # @option opts [String] :user 
  # @option opts [String] :tenant the tenant unique id (uuid)
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [RoleAssignmentList]
  describe 'list_role_assignments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_role_assignment
  # Remove Role Assignment
  # Remove a single role assignment by its id.
  # @param role_assignment_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [nil]
  describe 'remove_role_assignment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unassign_role
  # Unassign Role
  # Unassign a role from a user in a given scope (read: tenant).
  # @param role 
  # @param user 
  # @param scope 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :environment filter only objects belonging to this environment
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [nil]
  describe 'unassign_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
