=begin
#Permit.io API

#Fullstack Authorization as a Service

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::RolesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RolesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::RolesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RolesApi' do
    it 'should create an instance of RolesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::RolesApi)
    end
  end

  # unit tests for create_role
  # Create Role
  # Create a new role under the active organization.
  # @param new_role 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [Role]
  describe 'create_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_role
  # Delete Role
  # Delete an existing role.
  # @param role_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [nil]
  describe 'delete_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_role
  # Get Role
  # Retrieve role details.
  # @param role_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [Role]
  describe 'get_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_roles
  # List Roles
  # Get the list of roles that were configured at either the organization (workspace) level or at the environment level.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :skip Skip first n results
  # @option opts [Integer] :limit Limit to n results
  # @option opts [Boolean] :with_permissions 
  # @option opts [String] :tenant the tenant unique id (uuid)
  # @option opts [String] :environment filter only objects belonging to this environment
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [RoleList]
  describe 'list_roles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_role
  # Update Role
  # Update the role data.
  # @param role_id 
  # @param update_role 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [Role]
  describe 'update_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
