=begin
#Permit.io API

#Fullstack Authorization as a Service

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::PolicyDecisionPointsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PolicyDecisionPointsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::PolicyDecisionPointsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyDecisionPointsApi' do
    it 'should create an instance of PolicyDecisionPointsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::PolicyDecisionPointsApi)
    end
  end

  # unit tests for create_pdp
  # Create Policy Decision Point
  # Create a new Policy Decision Point.
  # @param new_pdp 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [PDP]
  describe 'create_pdp test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_pdp
  # Delete Policy Decision Point
  # Delete an existing PDP.
  # @param pdp_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [nil]
  describe 'delete_pdp test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_current_pdp_config
  # Get Connected PDP Config
  # @param [Hash] opts the optional parameters
  # @return [RemoteConfig]
  describe 'get_current_pdp_config test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pdp
  # Get Policy Decision Point
  # Retrieve PDP details.
  # @param pdp_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [PDP]
  describe 'get_pdp test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pdp_config
  # Get PDP Config
  # @param pdp_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [RemoteConfig]
  describe 'get_pdp_config test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_pdps
  # List Policy Decision Points
  # Get a list of PDPs configured under this organization/environment.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :skip Skip first n results
  # @option opts [Integer] :limit Limit to n results
  # @option opts [String] :environment filter only objects belonging to this environment
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [PDPList]
  describe 'list_pdps test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rotate_pdp_secret
  # Rotate PDP Secret
  # Rotate the client secret for this project.
  # @param pdp_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [PDP]
  describe 'rotate_pdp_secret test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_pdp
  # Update Policy Decision Point
  # Update the PDP settings.
  # @param pdp_id 
  # @param update_pdp 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_organization_id The id of the active organization you want to query on
  # @return [PDP]
  describe 'update_pdp test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
